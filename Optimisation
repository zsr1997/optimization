{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TP d'optimisation\n",
    "## Méthodes d'optimisation pour la régression logistique pénalisée lasso"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On veut comparer les algorithmes ISTA, FISTA, ADMM et SGD sur la régression logistique pénalisée lasso."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On considère que l'on observe les couples $(y_i,X_i)$ avec $y_i \\in \\{ -1, 1\\}$ et $X_i \\in \\mathbb R^p$ dont la vraisemblance au point $\\beta \\in \\mathbb R^p$ est donnée par \n",
    "$$\n",
    "\\prod_{i=1}^n \\frac{1}{1+\\exp(-y_i X_i \\beta)}.\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On veut donc résoudre\n",
    "$$\n",
    "\\arg\\min_\\beta \\frac{1}{n}\\sum_{i=1}^n \\log\\big(1 + \\exp(-y_i X_i \\beta) \\big)+  \\lambda\\| \\beta \\|_{\\ell_1}\n",
    "$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulation dans un modèle logistique"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Choix des valeurs de $n$ et $p$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "n_features = 50  #p\n",
    "n_samples = 2000"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Choix des valeurs de $\\beta^\\star$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On pose $\\beta^\\star_j = (-1)^{j-1} \\exp(-(j-1)/10)$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Parameters')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pylab as plt\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "idx = np.arange(n_features)\n",
    "params = (-1) ** idx  * np.exp(-idx / 10.)\n",
    "params[20:] = 0.\n",
    "plt.stem(params)\n",
    "plt.title(\"Parameters\")\n",
    "#pleain de beta qui sont nuls en vrai.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simulation de la matrice X (features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.71,  0.86, -0.72, ..., -1.87, -0.58,  0.75],\n",
       "       [-1.26, -0.36,  0.05, ...,  0.2 ,  0.78, -1.69],\n",
       "       [-0.21,  0.59, -2.61, ...,  1.86, -0.18, -0.16],\n",
       "       ...,\n",
       "       [ 0.68, -1.37,  0.82, ...,  0.2 ,  0.72,  2.36],\n",
       "       [ 1.55, -0.92, -0.39, ...,  0.11, -1.59, -0.33],\n",
       "       [ 1.13, -0.7 , -1.22, ..., -1.98, -0.26,  0.37]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "from numpy.random import multivariate_normal\n",
    "from scipy.linalg.special_matrices import toeplitz\n",
    "\n",
    "# Correlation\n",
    "rho = 0.1\n",
    "# Matrice de covariance Toeplitz\n",
    "\n",
    "np.set_printoptions(precision=2) # pour simplifier l'affichage\n",
    "cov = toeplitz(rho ** np.arange(0, n_features))\n",
    "\n",
    "\n",
    "# Simulation d'un vecteur gaussien de taille n avec cette matrice de covariance\n",
    "features = multivariate_normal(np.zeros(n_features), cov, size=n_samples)\n",
    "features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simulations des $y_i$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Coder une fonction **sigmoïd**. Attention aux overflows possibles !"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Coder une fonction **simu_log_reg** qui pour $n$, $\\beta^\\star$ et $\\rho$ renvoie une matrice de features et un vecteur de labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from numpy.random import binomial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "t=np.array([-20,20])\n",
    "idx=t>0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False,  True])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20]\n",
      "[-20]\n"
     ]
    }
   ],
   "source": [
    "print(t[idx])\n",
    "print(t[~idx])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid(t):\n",
    "    idx=t>0\n",
    "    out=np.empty(t.size)\n",
    "    out[idx]=1 / (1+np.exp(-t[idx]))\n",
    "    exp_t=np.exp(t[~idx])\n",
    "    out[~idx] = exp_t/(1.+exp_t)\n",
    "    return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.06e-09, 1.00e+00])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sigmoid(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def simu_logreg(n_samples,params=params,rho=0.1):\n",
    "    \"\"\" simulation in a logistic regression model \n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    coefs : `numpy.array`, shape=(n_features,)\n",
    "        Coefficients of the model\n",
    "    n_samples : `int`, \n",
    "        Number of samples to simulate\n",
    "    rho : `float`, default=0.1\n",
    "        Correlation of the features\n",
    "    Returns\n",
    "    -------\n",
    "    X : `numpy.ndarray`, shape=(n_samples, n_features)\n",
    "    Simulated features matrix. It samples of a centered Gaussian\n",
    "    vector with covariance given by the Toeplitz matrix\n",
    "    y : `numpy.array`, shape=(n_samples,)\n",
    "                 Simulated labels\n",
    "    \"\"\"\n",
    "    n_features = params.size\n",
    "    \n",
    "    cov = toeplitz(rho ** np.arange(0, n_features))\n",
    "    \n",
    "    features = multivariate_normal(np.zeros(n_features), cov, size=n_samples)\n",
    "    #les probabilités pour y=1\n",
    "    pis = sigmoid(features.dot(params))\n",
    "    #j'ai calculé proba avec le loi binomiale\n",
    "    labels = 2 * binomial(1,pis, n_samples) - 1\n",
    "    \n",
    "    return((features,labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2000,)\n",
      "(2000, 50)\n",
      "[ 1 -1 -1  1  1 -1  1 -1  1 -1]\n",
      "[[ 1.09e+00  9.30e-01 -1.95e-01 -6.78e-01  7.33e-01  5.55e-01 -1.31e-03\n",
      "  -1.17e+00  1.39e+00]\n",
      " [ 4.31e-01  2.12e-01 -2.72e+00 -3.46e-01  9.73e-02  6.01e-01  7.44e-01\n",
      "  -1.93e-01  5.15e-01]\n",
      " [-9.80e-01  1.57e-01 -1.13e-01  1.13e+00 -9.97e-02 -1.25e+00  1.79e-01\n",
      "   1.44e+00  2.45e-01]\n",
      " [-1.02e+00 -4.39e-01  1.09e+00  1.45e+00  1.45e-01 -5.00e-01 -1.07e+00\n",
      "   9.49e-01  1.68e+00]\n",
      " [ 5.19e-01  1.06e+00  3.92e-01 -4.14e-01  2.46e-01  8.08e-01  1.75e-01\n",
      "  -4.50e-01 -3.95e-01]\n",
      " [ 1.89e+00 -1.25e+00  3.86e-01  7.70e-01 -4.16e-01  1.70e+00 -2.63e-01\n",
      "   8.86e-01  3.54e-01]\n",
      " [-7.88e-01 -1.38e+00  1.99e-01  9.99e-01 -1.64e+00 -1.14e+00 -7.99e-01\n",
      "  -1.01e+00 -8.86e-01]\n",
      " [-9.94e-01 -1.09e-02  4.49e-01  2.84e+00  2.79e+00  3.46e-01  1.25e+00\n",
      "   1.85e+00 -1.56e-01]\n",
      " [ 4.01e-01 -1.25e+00 -7.82e-01 -1.14e-02 -2.33e-02 -8.36e-01  4.46e-01\n",
      "   9.33e-01  2.66e-01]]\n"
     ]
    }
   ],
   "source": [
    "X,y = simu_logreg(2000)\n",
    "print(y.shape)\n",
    "print(X.shape)\n",
    "print(y[0:10])\n",
    "print(X[1:10,1:10])#10 premiers features sur 10 premiers individus"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Objectif, gradient sans lasso (quand $\\lambda=0$)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Coder une fonction qui calcule la perte logistique et son gradient pour une matrice de features $X$, un vecteur de labels $y$ et une valeur courante $w$ du paramètre\n",
    "- Vérifier qu'il n'y pas d'erreur en utilisant la fonction **check_grad** de scipy.optimize\n",
    "- Coder une fonction qui calcule l'objectif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def loss_logreg(w,X,y):\n",
    "    \"\"\" calcul de la perte logistique\n",
    "     Parameters\n",
    "    ----------\n",
    "    X : `numpy.array`, shape=(n_samples,n_features)\n",
    "        features\n",
    "    y : `numpy.array`, shape=(n_samples,)\n",
    "        labels\n",
    "    w : `numpy.array`, shape=(n_features,)\n",
    "        value of the parameter\n",
    "        \n",
    "    \"\"\"\n",
    "    u=y*X.dot(w)\n",
    "    return -np.mean(np.log(sigmoid(u)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6931471805599454"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loss_logreg(np.zeros(n_features),X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def grad_logreg(w,X,y):\n",
    "    \"\"\" calcul du gradient de la perte logistique\n",
    "         Parameters\n",
    "    ----------\n",
    "    X : `numpy.array`, shape=(n_samples,n_features)\n",
    "        features\n",
    "    y : `numpy.array`, shape=(n_samples,)\n",
    "        labels\n",
    "    w : `numpy.array`, shape=(n_features,)\n",
    "        value of the parameter\n",
    "    \"\"\"\n",
    "    u=y*X.dot(w)\n",
    "    n_samples, _=X.shape\n",
    "\n",
    "    return X.T.dot(y*(sigmoid(u)-1))/n_samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.46e-01,  1.15e-01, -1.05e-01,  9.31e-02, -6.40e-02,  7.72e-02,\n",
       "       -5.37e-02,  4.42e-02, -4.76e-02,  5.62e-02, -4.96e-02,  3.40e-02,\n",
       "       -2.52e-02,  4.49e-02, -3.20e-02,  5.16e-03, -3.50e-02,  1.94e-02,\n",
       "       -2.31e-02,  1.74e-02, -1.82e-02, -2.31e-03, -2.60e-02, -3.02e-03,\n",
       "       -3.41e-03, -1.89e-03,  2.53e-02,  1.45e-02, -7.99e-03, -2.00e-03,\n",
       "        8.41e-03,  4.49e-03,  1.11e-04, -2.14e-03,  1.79e-04,  4.02e-03,\n",
       "       -1.14e-02,  5.63e-03, -1.47e-02, -4.34e-04, -2.37e-02,  1.75e-02,\n",
       "       -8.59e-03,  7.63e-03, -1.58e-02, -2.22e-03,  2.95e-02,  3.25e-03,\n",
       "       -9.83e-03,  4.27e-04])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grad_logreg(np.zeros(n_features),X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.5986395225340792e-08\n",
      "4.46696805746576e-08\n"
     ]
    }
   ],
   "source": [
    "from scipy.optimize import check_grad\n",
    "print(check_grad(loss_logreg, grad_logreg, params,X,y))\n",
    "print(check_grad(loss_logreg, grad_logreg, np.zeros(n_features),X,y)) #erreur de gradient discret"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def objective(w,X,y):\n",
    "    return(loss_logreg(w,X,y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2999.8391082859985\n"
     ]
    }
   ],
   "source": [
    "from numpy.linalg import norm, eig\n",
    "vp , _=eig(X.T.dot(X))\n",
    "print(np.sort(vp)[-1]) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On met le tout dans une classe comme indiqué ci-dessous"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from numpy.linalg import norm\n",
    "class Logreg:\n",
    "    \"\"\"       \n",
    "    Parameters\n",
    "    ----------\n",
    "    X : `numpy.array`, shape=(n_samples,n_features)\n",
    "        features\n",
    "    y : `numpy.array`, shape=(n_samples,)\n",
    "        labels\n",
    "    lamb : `float`, \n",
    "        value of the regularization parameter\n",
    "    \"\"\"\n",
    "    def __init__(self,X,y,lamb):\n",
    "        self.X = X\n",
    "        self.y = y\n",
    "        self.lamb = lamb\n",
    "        self.n_samples, self.n_features = X.shape\n",
    "\n",
    "    def loss(self,w):\n",
    "        u = self.y * self.X.dot(w) \n",
    "        return -np.sum(np.log(sigmoid(u))) / self.n_samples\n",
    "\n",
    "    def grad(self,w):\n",
    "        u = self.y * self.X.dot(w) \n",
    "        return self.X.T.dot(self.y  * (sigmoid(u) - 1)) / self.n_samples\n",
    "\n",
    "    def objective(self,w):\n",
    "        return(self.loss_logreg(w))\n",
    "    \n",
    "    def lip_const(self):\n",
    "        vp , _=eig(self.X.T.dot(self.X))\n",
    "        L=np.max(vp)/(4*self.n_samples)\n",
    "        return L\n",
    "    #return np.sum(norm(X,axis=0,ord=2))/(4*n_samples)#norm(self.X.T.dot(self.x),2)/(4*self.n_samples)\n",
    "    \n",
    "    def hessian(self,w):\n",
    "        u=self.y*self.X.dot(w)\n",
    "        var=sigmoid(u)*(1-sigmoid(u))\n",
    "        hessaine=self.X.T.dot(np.diag(var)).dot(self.X)/self.n_samples \n",
    "        return hessaine\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[30.17  2.98  5.8  ...  5.17  5.88  7.62]\n",
      " [ 2.98 31.16  6.4  ...  8.26  5.76  7.85]\n",
      " [ 5.8   6.4  28.66 ...  7.14  7.9   7.27]\n",
      " ...\n",
      " [ 5.17  8.26  7.14 ... 27.26  2.7   6.61]\n",
      " [ 5.88  5.76  7.9  ...  2.7  30.82  6.1 ]\n",
      " [ 7.62  7.85  7.27 ...  6.61  6.1  28.87]]\n"
     ]
    }
   ],
   "source": [
    "model_logreg = Logreg(X,y,0.1)\n",
    "model_logreg.grad(np.zeros(n_features))\n",
    "model_logreg.lip_const()\n",
    "print(np.linalg.inv(model_logreg.hessian((np.ones(n_features)))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.5986395225340792e-08\n"
     ]
    }
   ],
   "source": [
    "print(check_grad(model_logreg.loss, model_logreg.grad, params))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Descente de gradient et algorithme de Newton"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Coder l'algorithme de descente de gradient, il faut ajouter une méthode **lip_const** qui calcule une constante de Lipschitz pour le gradient.\n",
    "- Coder l'algorithme de Newtow, il faudra ajouter une méthode **hessian** à la classe logreg.\n",
    "- Représenter l'évolution des objectifs graphiquement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def gd(model, w0, step = None, n_iter=50, verbose=True):\n",
    "    \"\"\"\n",
    "    Gradient descent\n",
    "    \"\"\"\n",
    "    w = w0.copy()\n",
    "    w_new = w0.copy()\n",
    "    n_samples, n_features = model.X.shape\n",
    "    # objective history\n",
    "    objectives = []\n",
    "    # Current objective\n",
    "    obj = model.loss(w) \n",
    "    objectives.append(obj) \n",
    "    if verbose:\n",
    "        print(\"Lauching GD solver...\")\n",
    "        print(' | '.join([name.center(8) for name in [\"it\", \"obj\"]])) \n",
    "    for k in range(n_iter + 1):\n",
    "        if step==None:\n",
    "            step = 1/model.lip_const()\n",
    "    #######################################################################\n",
    "        w_new[:] =w-step*model.grad(w)\n",
    "        w[:] = w_new\n",
    "    #######################################################################\n",
    "        obj = model.loss(w) \n",
    "        objectives.append(obj)\n",
    "        if k % 10 == 0 and verbose:\n",
    "            print(' | '.join([(\"%d\" % k).rjust(8), (\"%.2e\" % obj).rjust(8)]))\n",
    "    return w, np.array(objectives)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def newton(model, w0, n_iter=50, verbose=True):\n",
    "    \"\"\"\n",
    "    Newton algorithm\n",
    "    \"\"\"\n",
    "    w = w0.copy()\n",
    "    w_new = w0.copy()\n",
    "    n_samples, n_features = model.X.shape\n",
    "    # objective history\n",
    "    objectives = []\n",
    "    # Current objective\n",
    "    obj = model.loss(w) \n",
    "    objectives.append(obj) \n",
    "    if verbose:\n",
    "        print(\"Lauching GD solver...\")\n",
    "        print(' | '.join([name.center(8) for name in [\"it\", \"obj\"]])) \n",
    "    for k in range(n_iter + 1):\n",
    "    #######################################################################\n",
    "        w_new[:] = w-np.dot(np.linalg.inv(model.hessian(w)),model.grad(w))\n",
    "        \n",
    "        \n",
    "        #Nous utilisons la définition de l'algo de newton, ou w_new=w_ancien-\n",
    "        #step*decrement_x_nt^k, d'ou decrement_x_nt^k est obtenu par la solution \n",
    "        #de système linéaire de hessian de w et gradient de w\n",
    "        \n",
    "        \n",
    "        w[:] = w_new\n",
    "    #######################################################################\n",
    "        obj = model.loss(w) \n",
    "        objectives.append(obj)\n",
    "        if k % 10 == 0 and verbose:\n",
    "            print(' | '.join([(\"%d\" % k).rjust(8), (\"%.2e\" % obj).rjust(8)]))\n",
    "    return w, np.array(objectives)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lauching GD solver...\n",
      "   it    |   obj   \n",
      "       0 | 5.25e-01\n",
      "      10 | 4.44e-01\n",
      "      20 | 4.42e-01\n",
      "      30 | 4.42e-01\n",
      "      40 | 4.42e-01\n",
      "      50 | 4.42e-01\n",
      "[ 1.03 -0.88  0.77 -0.75  0.62 -0.61  0.46 -0.4   0.38 -0.47  0.42 -0.24\n",
      "  0.24 -0.27  0.23 -0.07  0.26 -0.14  0.19 -0.08  0.08 -0.04  0.16 -0.06\n",
      "  0.05  0.02 -0.13 -0.07  0.02  0.01 -0.   -0.02  0.07 -0.04  0.03  0.07\n",
      "  0.08 -0.04  0.1  -0.06  0.07 -0.12  0.02 -0.05  0.06 -0.01 -0.18 -0.05\n",
      "  0.    0.04]\n",
      "[0.69 0.53 0.48 0.47 0.46 0.45 0.45 0.45 0.45 0.44 0.44 0.44 0.44 0.44\n",
      " 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44\n",
      " 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44\n",
      " 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44]\n",
      "Lauching GD solver...\n",
      "   it    |   obj   \n",
      "       0 | 4.70e-01\n",
      "      10 | 4.42e-01\n",
      "      20 | 4.42e-01\n",
      "      30 | 4.42e-01\n",
      "      40 | 4.42e-01\n",
      "      50 | 4.42e-01\n",
      "[ 1.03 -0.88  0.77 -0.75  0.62 -0.61  0.46 -0.4   0.38 -0.47  0.42 -0.24\n",
      "  0.24 -0.27  0.23 -0.07  0.26 -0.14  0.19 -0.08  0.08 -0.04  0.16 -0.06\n",
      "  0.05  0.02 -0.13 -0.07  0.02  0.01 -0.   -0.02  0.07 -0.04  0.03  0.07\n",
      "  0.08 -0.04  0.1  -0.06  0.07 -0.12  0.02 -0.05  0.06 -0.01 -0.18 -0.05\n",
      "  0.    0.04]\n",
      "[0.69 0.47 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44\n",
      " 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44\n",
      " 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44\n",
      " 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44 0.44]\n",
      "0.5076730251312256\n"
     ]
    }
   ],
   "source": [
    "w0 = np.zeros(n_features)\n",
    "n_iter = 60\n",
    "import time\n",
    "w_gd , obj_gd = gd(model_logreg,w0)\n",
    "print(w_gd)\n",
    "print(obj_gd)\n",
    "start = time.time()\n",
    "w_newton, obj_newton =newton(model_logreg,w0)\n",
    "print(w_newton)\n",
    "print(obj_newton)\n",
    "end = time.time()\n",
    "print(end - start)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-6.09e-01,  5.13e-01, -4.55e-01,  4.42e-01, -3.69e-01,  3.59e-01,\n",
       "       -2.70e-01,  2.34e-01, -2.31e-01,  2.77e-01, -2.26e-01,  1.43e-01,\n",
       "       -1.29e-01,  1.55e-01, -1.39e-01,  5.04e-02, -1.48e-01,  9.73e-02,\n",
       "       -1.13e-01,  5.40e-02, -5.49e-02,  2.74e-02, -8.33e-02,  1.92e-02,\n",
       "       -2.73e-02, -4.20e-04,  6.75e-02,  4.05e-02, -1.65e-02,  2.38e-03,\n",
       "       -1.13e-02,  7.74e-03, -3.08e-02,  1.71e-02, -6.22e-03, -5.02e-02,\n",
       "       -4.03e-02,  2.87e-02, -5.43e-02,  3.85e-02, -4.22e-02,  5.49e-02,\n",
       "       -1.56e-02,  3.37e-02, -4.28e-02, -4.44e-04,  1.07e-01,  3.06e-02,\n",
       "       -9.99e-03, -2.42e-02])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.dot(np.linalg.inv(model_logreg.hessian(w0)),model_logreg.grad(w0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<StemContainer object of 3 artists>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.stem(w_gd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<StemContainer object of 3 artists>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.stem(w_newton)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6, 5))\n",
    "plt.yscale(\"log\")\n",
    "plt.plot(obj_gd , label=\"Gradient descent\", lw=2) \n",
    "plt.plot(obj_newton , label=\"Newton algorithm\", lw=2) \n",
    "#plt.plot(obj_agd - obj_opt, label=\"AGD\", lw=2) \n",
    "#plt.plot(obj_cd - obj_opt, label=\"CD\", lw=2) \n",
    "#plt.plot(obj_cgd - obj_opt, label=\"CGD\", lw=2) plt.xlabel(r\"$k$\", fontsize=16)\n",
    "plt.ylabel(r\"$F(x_k)$\", fontsize=16) \n",
    "plt.legend(loc='lower left')\n",
    "plt.title('Objectif')\n",
    "plt.xlim((0, n_iter))\n",
    "plt.tight_layout()\n",
    "#plt.savefig('gd_agd_cgd.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#D'après ce graphe, on trouve visiblement que la performance d'algorithme de Newton est mieux que la performance d'algorithme de gradient descente. \n",
    "#Ce qui converge plus rapide."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Descente de gradient proximal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On retourne au cas de la régression logistique pénalisée lasso."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Faire une nouvelle classe **logreg_l1** sur le modèle de la classe **logreg** en ajoutant un méthode  qui calcule l'opérateur proximal de la norme 1 et en changeant la méthode objectif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from numpy.linalg import norm\n",
    "class Logreg_l1:\n",
    "    \"\"\"       \n",
    "    Parameters\n",
    "    ----------\n",
    "    X : `numpy.array`, shape=(n_samples,n_features)\n",
    "        features\n",
    "    y : `numpy.array`, shape=(n_samples,)\n",
    "        labels\n",
    "    lamb : `float`, \n",
    "        value of the regularization parameter\n",
    "    \"\"\"\n",
    "    def __init__(self,X,y,lamb):\n",
    "        self.X = X\n",
    "        self.y = y\n",
    "        self.lamb = lamb\n",
    "        self.n_samples, self.n_features = X.shape\n",
    "\n",
    "    def loss(self,w):\n",
    "        u = self.y * self.X.dot(w) \n",
    "        return -np.sum(np.log(sigmoid(u))) / self.n_samples\n",
    "    \n",
    "    def grad(self,w):\n",
    "        u = self.y * self.X.dot(w) \n",
    "        return self.X.T.dot(self.y  * (sigmoid(u) - 1)) / self.n_samples\n",
    "    \n",
    "    #def grad2(self,w,k):\n",
    "     #   u= self.y[k] * self.X[k].dot(w) \n",
    "      #  return self.X[k].T.dot(self.y[k]  * (sigmoid(u) - 1)) / self.n_samples\n",
    "\n",
    "    #def grad(self,w):\n",
    "    #    u = self.y * self.X.dot(w) \n",
    "      #  return self.X.T.dot(self.y  * (sigmoid(u) - 1)) / self.n_samples\n",
    "\n",
    "    def pen(self,w):\n",
    "        return self.X.lamb*np.sum(np.abs((w)))\n",
    "        \n",
    "    \n",
    "    def prox(self,w,step):\n",
    "        w_abs=np.abs(w)\n",
    "        return np.sign(w)*(w_abs-self.lamb*step)*(w_abs > self.lamb*step)\n",
    "    \n",
    "    #def prox2(self,w,step,k=-1,order=1) :\n",
    "     #   if(order == 1) : \n",
    "      #      return w - step*self.grad(w,k)\n",
    "       # else : \n",
    "        #    return w - np.linalg.inv( (1/step)*np.identity(self.n_features) + \n",
    "         #                            self.hessian(w) ).dot(self.grad(w,k))\n",
    "        \n",
    "\n",
    "    def objective(self,w):\n",
    "        return(self.loss_logreg(w) + self.pen_l1(w))\n",
    "    \n",
    "    def lip_const(self):\n",
    "        return norm(self.X.T.dot(self.X),2)/(4*self.n_samples)\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2000,)\n",
      "(2000, 50)\n"
     ]
    }
   ],
   "source": [
    "X,y = simu_logreg(2000)\n",
    "lamb=0\n",
    "print(y.shape)\n",
    "print(X.shape)\n",
    "model_logreg_l1 = Logreg_l1(X,y,lamb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.493508898821571e-08\n"
     ]
    }
   ],
   "source": [
    "print(check_grad(model_logreg_l1.loss, model_logreg_l1.grad, params))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Coder une fonction **pgd** qui code l'algorithme descente de gradient proximal (sur le modèle de la fonction **gd**)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def pgd(model, w0, step = None, n_iter=50, verbose=True):\n",
    "    \"\"\"Proximal gradient descent\n",
    "    \"\"\"\n",
    "    w = w0.copy()\n",
    "    w_new = w0.copy()\n",
    "    n_samples, n_features = model.X.shape\n",
    "    # objective history\n",
    "    objectives = []\n",
    "    # Current objective\n",
    "    obj = model.loss(w) \n",
    "    objectives.append(obj) \n",
    "    if verbose:\n",
    "        print(\"Lauching GD solver...\")\n",
    "        print(' | '.join([name.center(8) for name in [\"it\", \"obj\"]])) \n",
    "    for k in range(n_iter + 1):\n",
    "        if step == None:\n",
    "            step = 1 / (model.lip_const())\n",
    "    #######################################################################\n",
    "        w_new[:] = model.prox(w-step*model.grad(w),step)\n",
    "        w[:] = w_new\n",
    "    #######################################################################\n",
    "        obj = model.loss(w) \n",
    "        objectives.append(obj)\n",
    "        if k % 10 == 0 and verbose:\n",
    "            print(' | '.join([(\"%d\" % k).rjust(8), (\"%.10e\" % obj).rjust(8)]))\n",
    "    return w, np.array(objectives)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lauching GD solver...\n",
      "   it    |   obj   \n",
      "       0 | 5.4405093479e-01\n",
      "      10 | 4.5756622271e-01\n",
      "      20 | 4.5498316880e-01\n",
      "      30 | 4.5472112647e-01\n",
      "      40 | 4.5469190014e-01\n",
      "      50 | 4.5468860648e-01\n"
     ]
    }
   ],
   "source": [
    "w0 = np.zeros(n_features)\n",
    "model_logreg_l1=Logreg_l1(X,y,0.01)\n",
    "#some definitions before lauching the algorithms\n",
    "n_iter = 60\n",
    "w_pgd , obj_pgd = pgd(model_logreg_l1,w0,n_iter=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6, 5))\n",
    "plt.yscale(\"log\")\n",
    "plt.plot(obj_pgd , label=\"PGC\", lw=2) \n",
    "#plt.plot(obj_agd - obj_opt, label=\"AGD\", lw=2) \n",
    "#plt.plot(obj_cd - obj_opt, label=\"CD\", lw=2) \n",
    "#plt.plot(obj_cgd - obj_opt, label=\"CGD\", lw=2) plt.xlabel(r\"$k$\", fontsize=16)\n",
    "plt.ylabel(r\"$F(x_k)$\", fontsize=16) \n",
    "plt.legend(loc='lower left')\n",
    "plt.title('Objectif')\n",
    "plt.xlim((0, n_iter))\n",
    "plt.tight_layout()\n",
    "#plt.savefig('gd_agd_cgd.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<StemContainer object of 3 artists>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXwAAAD4CAYAAADvsV2wAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAYFElEQVR4nO3df5DU913H8eerB0mupvUSc0lh4YTOICmWJqdn2hp/pE0QQmtB1GlSW9OODmZsanSUFuqoVaeCgzqp02hk0tTMtDZ2Ukqwopgmzaijpjl6sTShGEwscIfhaKRtIoYAb//Y77V7y3fvdvf73b3d/b4eMwz7/eyH/Xw/e+GVL5/v5/v5KCIwM7Pe97K5PgEzM2sPB76ZWUE48M3MCsKBb2ZWEA58M7OCmDfXJzCTyy67LJYsWTLXp2Fm1jX27dt3IiIG097r6MBfsmQJo6Ojc30aZmZdQ9LXar3nIR0zs4Jw4JuZFYQD38ysIBz4ZmYF4cA3MyuIjp6l04xdY+Ns33uQiZOnWDjQz6bVy1k/XJrr0zIzm3M9Ffi7xsbZsnM/p146C8D4yVNs2bkfwKFvZoWXy5COpDWSDko6JGlzyvvfLelvJP27pCckvSePdqtt33vw22E/5dRLZ9m+92ArmjMz6yqZA19SH3AncCOwArhZ0oqqau8FnoyIq4DrgD+WdEHWtqtNnDzVULmZWZHkcYV/DXAoIp6OiNPAfcC6qjoBvEKSgIuB54AzObQ9zcKB/obKzcyKJI/ALwFHKo6PJmWVPgq8BpgA9gO3R8S5tA+TtFHSqKTRycnJhk5k0+rl9M/vm1bWP7+PTauXN/Q5Zma9KI/AV0pZ9b6Jq4HHgYXA1cBHJb0y7cMiYkdEjETEyOBg6vo/Na0fLrF1w0ou6Ct3qzTQz9YNK33D1syMfGbpHAUWVxwvonwlX+k9wLYob6B7SNIzwJXAF3Nof5r1wyU+9cXDAPz1L70x7483M+taeVzhPwYsk7Q0uRF7E7C7qs5h4HoASVcAy4Gnc2jbzMzqlPkKPyLOSLoN2Av0AfdExBOSbk3evwv4feAvJe2nPAT0gYg4kbVtMzOrXy4PXkXEHmBPVdldFa8ngJ/Ioy0zM2uO19IxMysIB76ZWUE48M3MCsKBb2ZWEA58M7OCcOCbmRWEA9/MrCAc+GZmBeHANzMriJ7a4rAZ3gPXzIqi0IHvPXDNrEgKPaTjPXDNrEgKHfjeA9fMiqTQge89cM2sSAod+N4D18yKpNA3baduzL7//i9z+uw5Sp6lY2Y9LJfAl7QG+AjlHa/ujohtKXWuA+4A5gMnIuLH82g7K++Ba2ZFkTnwJfUBdwKrKG9o/pik3RHxZEWdAeDPgDURcVjS5VnbNTOzxuQxhn8NcCgino6I08B9wLqqOu8AdkbEYYCIOJ5Du2Zm1oA8Ar8EHKk4PpqUVfo+4BJJj0jaJ+nna32YpI2SRiWNTk5O5nB6ZmYG+QS+Usqi6nge8IPAW4DVwG9J+r60D4uIHRExEhEjg4ODOZyemZlBPjdtjwKLK44XARMpdU5ExAvAC5L+EbgK+I8c2jczszrkcYX/GLBM0lJJFwA3Abur6jwA/KikeZJeDrweOJBD22ZmVqfMV/gRcUbSbcBeytMy74mIJyTdmrx/V0QckPT3wJeBc5Snbn4la9tmZla/XObhR8QeYE9V2V1Vx9uB7Xm0Z2ZmjSv00gpmZkXiwDczKwgHvplZQTjwzcwKwoFvZlYQhV4euV28UbqZdQIHfot5o3Qz6xQe0mkxb5RuZp3Cgd9i3ijdzDqFA7/FvFG6mXUKB36LeaN0M+sUvmnbYt4o3cw6hQO/DbxRupl1Ag/pmJkVhAPfzKwgHPhmZgWRS+BLWiPpoKRDkjbPUO+HJJ2V9DN5tGtmZvXLHPiS+oA7gRuBFcDNklbUqPeHlLdCNDOzNsvjCv8a4FBEPB0Rp4H7gHUp9d4HfAY4nkObZmbWoDwCvwQcqTg+mpR9m6QS8FPAtH1u00jaKGlU0ujk5GQOp2dmZpDPPHyllEXV8R3AByLirJRWveIPRuwAdgCMjIxUf05H8HLHZtaN8gj8o8DiiuNFwERVnRHgviTsLwPWSjoTEbtyaL+tvNyxmXWrPIZ0HgOWSVoq6QLgJmB3ZYWIWBoRSyJiCXA/8MvdGPbg5Y7NrHtlvsKPiDOSbqM8+6YPuCcinpB0a/L+rOP23cTLHZtZt8plLZ2I2APsqSpLDfqIeHcebc6VhQP9jKeEu5c7NrNO5ydtG+Tljs2sW3m1zAZ5uWMz61YO/CZ4uWMz60Ye0jEzKwgHvplZQXhIpwP5SV4zawUHfofxk7xm1ioe0ukwfpLXzFrFgd9h/CSvmbWKA7/D1Hpi10/ymllWDvwO4yd5zaxVfNO2w/hJXjNrFQd+B2rmSV5P5TSz2Tjwe4CncppZPTyG3wM8ldPM6uHA7wGeymlm9cgl8CWtkXRQ0iFJm1Pe/zlJX05+/Yukq/Jo18o8ldPM6pE58CX1AXcCNwIrgJslraiq9gzw4xHxOuD3gR1Z27Xv8FROM6tHHjdtrwEORcTTAJLuA9YBT05ViIh/qaj/b8CiHNq1hKdymlk98gj8EnCk4vgo8PoZ6v8C8He13pS0EdgIMDQ0lMPpFYM3ZTGz2eQxhq+UskitKL2JcuB/oNaHRcSOiBiJiJHBwcEcTs/MzCCfK/yjwOKK40XARHUlSa8D7gZujIiv59CutZkf7jLrbnkE/mPAMklLgXHgJuAdlRUkDQE7gXdFxH/k0Ka1mR/uMut+mYd0IuIMcBuwFzgAfDoinpB0q6Rbk2q/DXwP8GeSHpc0mrVday8/3GXW/XJZWiEi9gB7qsruqnj9i8Av5tGWzQ0/3GXW/fykrdXFD3eZdT8HvtXFD3eZdT+vlml18cNdZt3PgV9QzUyx9MNdZt3NgV9AnmJpVkwewy8gT7E0KyYHfgF5iqVZMXlIp4AWDvQznhLueU+x9FIMZp3FV/gF1I4pllP3CcZPniL4zn2CXWPjubVhZo1x4BfQ+uESWzes5IK+8o+/NNDP1g0rc7369n0Cs87jIZ2CavUUS98nMOs8DnxriWbvE3jc36x1PKRjLdHMfQKP+5u1lgPfWqKZ+wQe9zdrLQ/pWMs0ep+gU8f9PcxkvSKXwJe0BvgI0AfcHRHbqt5X8v5a4H+Bd0fEl/Jo23rHTOP+tUI3r3JID3ag5jIUQC5t5N2PWhr9M63+bvPsd6d+53n9LPKSOfAl9QF3Aqso72/7mKTdEfFkRbUbgWXJr9cDf578bvZtm1YvnxauUB73f9OVg6mhO/q15/jMvvHM5VPS2rho/stSh5k+tPsJXjxzLpc28uxHrdBodP2kWvXz/G7z6nenfue1zOVaVoqIbB8gvRH4UESsTo63AETE1oo6fwE8EhGfSo4PAtdFxLGZPntkZCRGRxvfDfHjN7+PV00eYcWCV9ZV/8lj3wSou34zf6bV9XuljRPPv8h/Tr5ARHDhvD4WX9rPkedO8eKZs+fVlUTaf7+Nll84r3xzOa2NRjXTRp79qPy+po4vu/hCxg6fTG37wnl9DA8NnFdeq36e321e/Z7r73x4aIATz7+Y+r2nldf677nyZ3Hha67kVR/84Hl16iFpX0SMpL2Xx5BOCThScXyU86/e0+qUgPMCX9JGYCPA0NBQUyd048oFvHjgG+eV1wqfWmE0U1g1+mfyqt8rbdSqf9nFF3LZxRdOKzt0/PnUz6h1sdJoeR5Bn6WNPPvx9IkXOHcuph3P1P5UefXPo1b9PL/bvPo919/5iedfTP3ev/V/Z5h8/sXzyqeOa53vk8e+yX+fOcZ7ap598/IIfKWUVfeonjrlwogdwA4oX+E3c0K1/s/4/r/4V6D+B40are82WlP/HdseTh3b75M4m/IXsdHyUvJsQFobA/3zpw3dQHmY6aL5L+N//velXNrIqx/NtF0a6OfC1cvP29jmT/cezOVcO7XfndhGaaCft29+87f/brQi8POYlnkUWFxxvAiYaKKOWapac/pvfv3iXMo3rV5es40Pve372bphJaWBfsR3ppf+zk9+f25t5NWPtBCB8iynWm1P3R85ffYc8J3x5DddOdjy7zavfs9l25tWL685i6zWz+NsxJxtF5rHFf5jwDJJS4Fx4CbgHVV1dgO3SbqP8nDPN2Ybv7fetWtsnLHDJzl99hzXbnt41hkKU++lzWoY+d5LcymfUuu9WueXVxt59GN7javyhQP9Nb/DWs8+fOGrk2zdsLLl321eP7+5bLvW9z7TlfzUd9/uWTqZb9oCSFoL3EF5WuY9EfFhSbcCRMRdybTMjwJrKE/LfE9EzHo3ttmbtrW8vcFhh0bru43Z61fPUIDy1U3ei7cVUTPf7dLNf5s6tirgmW1vac2J9pha3/tP/2Bp2syeqfKZfh67xsYz7xvd6pu2RMQeYE9V2V0VrwN4bx5tWXeb6WlaB342M/1LqJZ27Y3Qy5r5F2iaqf9xVA+vVbaRlZ+0tbbq1Kdpe8X64VJD4VDr2Yd2jCf3klrfeyM/j3ZcDHktHWurWleOvqKcG1NrHlXflPa/ttqvHRdDvsK3tvIVZedp9F8F1hrtGF7zFb61la8ozdK1Y+tRX+Fb2/mK0ux8zdx0b5QD387T6Dx5M8tHqy+GPKRj09SaGuZdp8y6nwPfpvGuU2a9y4Fv03ievFnvcuDbNJ4nb9a7HPg2TTumhpnZ3HDg97ipGTePPvMc1257eNabr54nb9a7PC2zhzW7GFOjU8M8jdOsO/gKv4e1Y8aNp3GadQ8Hfg9rx4wbT+M06x4O/B7Wjhk3nsZp1j0yBb6kSyU9KOmp5PdLUuoslvQFSQckPSHp9ixtWv3aMePG0zjNukfWK/zNwEMRsQx4KDmudgb49Yh4DfAG4L2SVmRs1+rQjhk3nsZp1j2yztJZB1yXvL4XeAT4QGWFZLPyY8nrb0k6AJSAJzO2bXVo9WJM7Vjhz8zykTXwr0gCnYg4JunymSpLWgIMA4/OUGcjsBFgaGgo4+lZO3i5Y7PuMGvgS/o88KqUt36zkYYkXQx8BvjViPhmrXoRsQPYATAyMhKNtGFmZrXNGvgRcUOt9yQ9K2lBcnW/ADheo958ymH/yYjY2fTZmplZ07LetN0N3JK8vgV4oLqCJAEfAw5ExJ9kbM/MzJqUNfC3AaskPQWsSo6RtFDSnqTOtcC7gDdLejz5tTZju2Zm1qBMN20j4uvA9SnlE8Da5PU/A8rSjpmZZecnbc3MCsKB32UaXe7YzGyKA7+LeGVKM8vCgd9FvDKlmWXhwO8iXpnSzLJw4HcRr0xpZlk48LuIV6Y0syy8p20X8cqUZpaFA7/LeGVKM2uWh3TMzArCgW9mVhAOfDOzgnDg58jLHphZJ3Pg58TLHphZp3Pg56SZZQ/8LwIzaycHfk4aXfbA/yIws3bLFPiSLpX0oKSnkt8vmaFun6QxSZ/L0mananTZAy+EZmbtlvUKfzPwUEQsAx5Kjmu5HTiQsb2O1eiyB14IzczaLWvgrwPuTV7fC6xPqyRpEfAW4O6M7XWs9cMltm5YSWmgHwGlgX62blhZ86lYL4RmZu2WdWmFKyLiGEBEHJN0eY16dwDvB14x2wdK2ghsBBgaGsp4eu3VyLIHm1YvZ8vO/dOGdbwQmpm10qyBL+nzwKtS3vrNehqQ9FbgeETsk3TdbPUjYgewA2BkZCTqaaMbeSE0M2u3WQM/Im6o9Z6kZyUtSK7uFwDHU6pdC7xN0lrgIuCVkj4REe9s+qx7hBdCM7N2yjqGvxu4JXl9C/BAdYWI2BIRiyJiCXAT8LDD3sys/bIG/jZglaSngFXJMZIWStqT9eTMzCw/mW7aRsTXgetTyieAtSnljwCPZGnTzMya4ydtzcwKwoFvZlYQDnwzs4Jw4JuZFYQD38ysIBz4ZmYF4cA3MysIB76ZWUE48M3MCsKBb2ZWEA58M7OCcOCbmRWEA7+GXWPjjB0+yaPPPMe12x5m19j4XJ+SmVkmDvwUu8bG2bJzP6fPngNg/OQptuzc79A3s67mwE+xfe/BaXvNApx66Szb9x6cozMyM8vOgZ9i4uSphsrNzLpBpsCXdKmkByU9lfx+SY16A5Lul/RVSQckvTFLu622cKC/oXIzs26Q9Qp/M/BQRCwDHkqO03wE+PuIuBK4CjiQsd2W2rR6Of3z+6aV9c/vY9Pq5XN0RmZm2WUN/HXAvcnre4H11RUkvRL4MeBjABFxOiJOZmy3pdYPl9i6YSWlgX4ElAb62bphJeuHS3N9amZmTcu0py1wRUQcA4iIY5IuT6nzamAS+Likq4B9wO0R8ULaB0raCGwEGBoaynh6zVs/XHLAm1lPmfUKX9LnJX0l5de6OtuYB/wA8OcRMQy8QO2hHyJiR0SMRMTI4OBgnU2YmdlsZr3Cj4gbar0n6VlJC5Kr+wXA8ZRqR4GjEfFocnw/MwS+mZm1RtYx/N3ALcnrW4AHqitExH8DRyRN3fG8HngyY7tmZtagrIG/DVgl6SlgVXKMpIWS9lTUex/wSUlfBq4G/iBju2Zm1qBMN20j4uuUr9iryyeAtRXHjwMjWdoyM7Ns/KStmVlBOPDNzArCgW9mVhAOfDOzgnDgm5kVhAPfzKwgHPhmZgXhwDczKwgHvplZQTjwzcwKwoFvZlYQDnwzs4Jw4JuZFURhAn/X2Dhjh0/y6DPPce22h9k1Nj7Xp2Rm1laFCPxdY+Ns2bmf02fPATB+8hRbdu536JtZoWQKfEmXSnpQ0lPJ75fUqPdrkp5I9sL9lKSLsrTbqO17D3LqpbPTyk69dJbtew+28zTMzOZU1iv8zcBDEbEMeIiUvWollYBfAUYi4rVAH3BTxnYbMnHyVEPlZma9KGvgrwPuTV7fC6yvUW8e0C9pHvByYCJjuw1ZONDfULmZWS/KGvhXRMQxgOT3y6srRMQ48EfAYeAY8I2I+IdaHyhpo6RRSaOTk5MZT69s0+rl9M/vm1bWP7+PTauX1/gTZma9Z9bAl/T5ZOy9+te6ehpIxvXXAUuBhcB3SXpnrfoRsSMiRiJiZHBwsN5+zGj9cImtG1ZSGuhHQGmgn60bVrJ+uJTL55uZdYNZNzGPiBtqvSfpWUkLIuKYpAXA8ZRqNwDPRMRk8md2Aj8MfKLJc27K+uGSA97MCi3rkM5u4Jbk9S3AAyl1DgNvkPRySQKuBw5kbNfMzBqUNfC3AaskPQWsSo6RtFDSHoCIeBS4H/gSsD9pc0fGds3MrEGKiLk+h5pGRkZidHR0rk/DzKxrSNoXESNp7xXiSVszM3Pgm5kVRkcP6UiaBL7W5B+/DDiR4+l0C/e7WNzvYqmn398bEalz2js68LOQNFprHKuXud/F4n4XS9Z+e0jHzKwgHPhmZgXRy4Ff1Ln+7nexuN/FkqnfPTuGb2Zm0/XyFb6ZmVVw4JuZFUTPBb6kNZIOSjok6bwduHqJpHskHZf0lYqyurad7FaSFkv6gqQDybaZtyflvd7viyR9UdK/J/3+3aS8p/s9RVKfpDFJn0uOi9Lv/5K0X9LjkkaTsqb73lOBL6kPuBO4EVgB3CxpxdyeVUv9JbCmqmzWbSe73Bng1yPiNcAbgPcmP+Ne7/eLwJsj4irgamCNpDfQ+/2ecjvTV9ktSr8B3hQRV1fMv2+67z0V+MA1wKGIeDoiTgP3Ud58pSdFxD8Cz1UV17vtZFeKiGMR8aXk9bcoh0CJ3u93RMTzyeH85FfQ4/0GkLQIeAtwd0Vxz/d7Bk33vdcCvwQcqTg+mpQVyazbTvYKSUuAYeBRCtDvZFjjccobDT2YLD3e8/0G7gDeD5yrKCtCv6H8P/V/kLRP0sakrOm+z7rjVZdRSpnnnfYgSRcDnwF+NSK+Wd5bp7dFxFngakkDwGclvXaOT6nlJL0VOB4R+yRdN8enMxeujYgJSZcDD0r6apYP67Ur/KPA4orjRcDEHJ3LXHk22W6SGbad7GqS5lMO+09GxM6kuOf7PSUiTgKPUL5/0+v9vhZ4m6T/ojxE+2ZJn6D3+w1AREwkvx8HPkt52Lrpvvda4D8GLJO0VNIFwE2Ut2Esknq2nexayTaZHwMORMSfVLzV6/0eTK7skdRPea/or9Lj/Y6ILRGxKCKWUP77/HBEvJMe7zeApO+S9Iqp18BPAF8hQ9977klbSWspj/n1AfdExIfn9oxaR9KngOsoL5n6LPA7wC7g08AQ5f2EfzYiqm/sdi1JPwL8E+XtMqfGdD9IeRy/l/v9Oso36PooX6h9OiJ+T9L30MP9rpQM6fxGRLy1CP2W9GrKV/VQHn7/q4j4cJa+91zgm5lZul4b0jEzsxoc+GZmBeHANzMrCAe+mVlBOPDNzArCgW9mVhAOfDOzgvh/Rlokrzzqc2YAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.stem(w_pgd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Coder un arrêt prematuré quand $tol = 1e-03 > \\|w_{\\text{new}} - w\\|/\\|w\\|$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def pgd2(model, w0,  step = None,n_iter=50, verbose=True,tol=1e-02):\n",
    "    \"\"\"Proximal gradient descent\n",
    "    \"\"\"\n",
    "    w = w0.copy()\n",
    "    w_new = w0.copy()\n",
    "    n_samples, n_features = model.X.shape\n",
    "    # objective history\n",
    "    objectives = []\n",
    "    # Current objective\n",
    "    obj = model.loss(w) \n",
    "    objectives.append(obj) \n",
    "    conditionarret=1e-02   #on définit une condition d'arrêt qui a le même valeur que tol\n",
    "    if verbose:\n",
    "        print(\"Lauching GD solver...\")\n",
    "        print(' | '.join([name.center(8) for name in [\"it\", \"obj\"]])) \n",
    "    for k in range(n_iter + 1):\n",
    "        if tol<=conditionarret:#On rappelle la condition d'arrêt Indiqué \n",
    "        #une fois que condition d'arrêt est satisfait ,on sort de la boucle\n",
    "        #et on retourne le résultat\n",
    "             if step == None:\n",
    "                step = 1 / (10* model.lip_const())\n",
    "    #######################################################################\n",
    "             w_new[:] = model.prox(w-step*model.grad(w),step)\n",
    "             conditionarret=np.linalg.norm(w_new[:]-w[:])/(np.linalg.norm(w[:]))\n",
    "             w[:] = w_new\n",
    "    #######################################################################\n",
    "             obj = model.loss(w) \n",
    "             objectives.append(obj)\n",
    "             if k % 10 == 0 and verbose:\n",
    "                 print(' | '.join([(\"%d\" % k).rjust(8), (\"%.2e\" % obj).rjust(8)]))\n",
    "        print(conditionarret)\n",
    "    return w, np.array(objectives)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lauching GD solver...\n",
      "   it    |   obj   \n",
      "       0 | 6.74e-01\n",
      "inf\n",
      "0.9400473426257658\n",
      "0.455769607361159\n",
      "0.29474571217836854\n",
      "0.21455412785062603\n",
      "0.16669970023453448\n",
      "0.1350109091411555\n",
      "0.11255340413576267\n",
      "0.09585602601876973\n",
      "0.08299277719036788\n",
      "      10 | 5.62e-01\n",
      "0.07280643196597116\n",
      "0.06456037674573169\n",
      "0.05776374830815761\n",
      "0.0520769774996081\n",
      "0.047257806448629903\n",
      "0.043121384273209766\n",
      "0.03954800530527963\n",
      "0.03643109763839586\n",
      "0.033687857657309306\n",
      "0.03125401214296358\n",
      "      20 | 5.18e-01\n",
      "0.029095345294158914\n",
      "0.027164198305046773\n",
      "0.02542812363116331\n",
      "0.023860435002557957\n",
      "0.02243899660950199\n",
      "0.02114530369092708\n",
      "0.01996377607395555\n",
      "0.018881209430411685\n",
      "0.017886344781916044\n",
      "0.016969527665162767\n",
      "      30 | 4.96e-01\n",
      "0.016122435989485068\n",
      "0.015337861029716772\n",
      "0.014609529888109195\n",
      "0.013931960589649663\n",
      "0.013300343056908782\n",
      "0.012710440757197398\n",
      "0.01215850897480626\n",
      "0.011641226538830037\n",
      "0.011155638506773972\n",
      "0.010699107819104972\n",
      "      40 | 4.83e-01\n",
      "0.010269274338824505\n",
      "0.009864020001306163\n",
      "0.009864020001306163\n",
      "0.009864020001306163\n",
      "0.009864020001306163\n",
      "0.009864020001306163\n",
      "0.009864020001306163\n",
      "0.009864020001306163\n",
      "0.009864020001306163\n",
      "0.009864020001306163\n",
      "0.009864020001306163\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-37-4a5b7a64bed3>:24: RuntimeWarning: divide by zero encountered in double_scalars\n",
      "  conditionarret=np.linalg.norm(w_new[:]-w[:])/(np.linalg.norm(w[:]))\n"
     ]
    }
   ],
   "source": [
    "w_pgd2 , obj_pgd2 = pgd2(model_logreg_l1,w0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6, 5))\n",
    "plt.yscale(\"log\")\n",
    "plt.plot(obj_pgd2 , label=\"PGC\", lw=2) \n",
    "#plt.plot(obj_agd - obj_opt, label=\"AGD\", lw=2) \n",
    "#plt.plot(obj_cd - obj_opt, label=\"CD\", lw=2) \n",
    "#plt.plot(obj_cgd - obj_opt, label=\"CGD\", lw=2) plt.xlabel(r\"$k$\", fontsize=16)\n",
    "plt.ylabel(r\"$F(x_k)$\", fontsize=16) \n",
    "plt.legend(loc='lower left')\n",
    "plt.title('Objectif')\n",
    "plt.xlim((0, n_iter))\n",
    "plt.tight_layout()\n",
    "#plt.savefig('gd_agd_cgd.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ici on constate que la courbe s'arrête à l'itération environs 40, \n",
    "#c'est à dire à l'itération 40, on atteint à la condition d'arrêt."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Descente de gradient stochastique proximal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-41-ccc8d5dac16b>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-41-ccc8d5dac16b>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    - Coder un algorithme de descente de gradient stochastique proximal pour ce problème\u001b[0m\n\u001b[0m            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "- Coder un algorithme de descente de gradient stochastique proximal pour ce problème\n",
    "- Comparer ses performances au PGD classique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#définissons le processus Descente de gradient stochastique proximal\n",
    "#qui s'appelle pgd3\n",
    "\n",
    "\n",
    "def pgd3(model, w0, step = 0.5, n_iter=50, verbose=True):\n",
    "    \"\"\"Proximal gradient descent\n",
    "    \"\"\"\n",
    "    w = w0.copy()\n",
    "    w_new = w0.copy()\n",
    "    n_samples, n_features = model.X.shape\n",
    "    # objective history\n",
    "    objectives = []\n",
    "    # Current objective\n",
    "    obj = model.loss(w) \n",
    "    objectives.append(obj) \n",
    "    if verbose:\n",
    "        print(\"Lauching SGD solver...\")\n",
    "        print(' | '.join([name.center(8) for name in [\"it\", \"obj\"]])) \n",
    "    for k in range(n_iter + 1):\n",
    "        if step == None:\n",
    "            step = 1 / (model.lip_const())\n",
    "    #######################################################################\n",
    "    \n",
    "    #Chaque fois,on choisit une valeur aléatoire ce qui indique l'indice de gradient aléatoire\n",
    "        r = np.random.randint(len(model.grad(w)))\n",
    "        \n",
    "    #D'après la définition de Descente de gradient stochastique,on va descendre chaque fois \n",
    "    #à une direction de gradient stochastique d'ou vient notre résultat du processus w_new.\n",
    "        w_new[:] = model.prox(w[:] - step*model.grad(w[:])[r], step)\n",
    "        w[:] = w_new\n",
    "    #######################################################################\n",
    "        obj = model.loss(w) \n",
    "        objectives.append(obj)\n",
    "        if k % 10 == 0 and verbose:\n",
    "            print(' | '.join([(\"%d\" % k).rjust(8), (\"%.10e\" % obj).rjust(8)]))\n",
    "    return w, np.array(objectives)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lauching SGD solver...\n",
      "   it    |   obj   \n",
      "       0 | 3.2342787520e+00\n",
      "      10 | 3.1419864330e+00\n",
      "      20 | 3.0345483725e+00\n",
      "      30 | 2.9380055962e+00\n",
      "      40 | 2.8274948794e+00\n",
      "      50 | 2.7511061604e+00\n"
     ]
    }
   ],
   "source": [
    "w0 = np.ones(n_features)\n",
    "model_logreg_l1=Logreg_l1(X,y,lamb)\n",
    "#some definitions before lauching the algorithms\n",
    "w_pgd , obj_agd = pgd3(model_logreg_l1,w0,0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6, 5))\n",
    "plt.yscale(\"log\")\n",
    "plt.plot(obj_agd , label=\"PGC\", lw=2) \n",
    "#plt.plot(obj_agd - obj_opt, label=\"AGD\", lw=2) \n",
    "#plt.plot(obj_cd - obj_opt, label=\"CD\", lw=2) \n",
    "#plt.plot(obj_cgd - obj_opt, label=\"CGD\", lw=2) plt.xlabel(r\"$k$\", fontsize=16)\n",
    "plt.ylabel(r\"$F(x_k)$\", fontsize=16) \n",
    "plt.legend(loc='lower left')\n",
    "plt.title('Objectif')\n",
    "plt.xlim((0, n_iter))\n",
    "plt.tight_layout()\n",
    "#plt.savefig('gd_agd_cgd.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<StemContainer object of 3 artists>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.stem(w_pgd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ADMM "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-179-5c59b5aa667a>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-179-5c59b5aa667a>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    - Coder un algorithme ADMM pour ce problème\u001b[0m\n\u001b[0m            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "- Coder un algorithme ADMM pour ce problème\n",
    "- Comparer ses performances au PGD classique et au SPGD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
